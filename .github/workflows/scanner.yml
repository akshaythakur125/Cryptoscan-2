name: 3-hour Crypto Scanner

on:
  schedule:
    - cron: "0 */3 * * *"  # runs every 3 hours
  workflow_dispatch:      # allow manual runs

concurrency:
  group: crypto-scanner
  cancel-in-progress: false

jobs:
  run-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # set sensitive values as repo secrets (Settings → Secrets → Actions)
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
      # other configurable defaults
      RANK_MIN: "40"
      RANK_MAX: "100"
      API_RATE_LIMIT_SECONDS: "0.6"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies (if requirements.txt present; fallback to minimal)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # fallback minimal packages — adjust to your script needs
            pip install requests pandas python-dotenv
          fi

      - name: Debug: show repo root & files (confirm scanner present)
        run: |
          echo "WORKDIR: $(pwd)"
          ls -la
          echo "Repo root listing above. Ensure scanner_github.py is present at repo root."

      - name: Run scanner_github.py (with 3 retries & exponential backoff)
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          exit_code=0

          while [ "$attempts" -lt "$max_attempts" ]; do
            attempts=$((attempts + 1))
            echo "Attempt $attempts / $max_attempts — running scanner_github.py"
            if python scanner_github.py; then
              echo "scanner_github.py finished successfully"
              exit_code=0
              break
            else
              rc=$?
              echo "scanner_github.py exited with code $rc"
              exit_code=$rc
              if [ "$attempts" -lt "$max_attempts" ]; then
                sleep_seconds=$((attempts * 10))
                echo "Sleeping ${sleep_seconds}s before retry..."
                sleep $sleep_seconds
              fi
            fi
          done

          if [ "$exit_code" -ne 0 ]; then
            echo "All attempts failed (exit code $exit_code)."
            exit $exit_code
          fi

      - name: Upload scan results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: results/*.csv
