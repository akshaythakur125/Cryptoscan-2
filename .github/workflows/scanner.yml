name: 3-hour Crypto Scanner

# Run on a schedule and allow manual runs
on:
  schedule:
    - cron: "0 */3 * * *"   # every 3 hours at top of each 3rd hour
  workflow_dispatch:        # allow manual run

concurrency:
  group: crypto-scanner
  cancel-in-progress: false

jobs:
  run-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Expose secrets and defaults as env variables for the job
    env:
      # SMTP / email (set these in repo Settings -> Secrets)
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}

      # Scanner tuning (set as secrets or repo vars if you want)
      RANK_MIN: ${{ secrets.RANK_MIN || '40' }}
      RANK_MAX: ${{ secrets.RANK_MAX || '100' }}
      TOP_N: ${{ secrets.TOP_N || '250' }}
      API_RATE_LIMIT_SECONDS: ${{ secrets.API_RATE_LIMIT_SECONDS || '0.6' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies (if requirements.txt present; fallback to minimal)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # minimal fallback (adjust as needed)
            pip install requests pandas numpy python-dotenv
            # install ccxt only if you intend funding-rate checks
            # pip install ccxt
          fi

      - name: Debug: show repo files (confirm scanner present)
        run: |
          echo "WORKDIR: $(pwd)"
          ls -la
          echo "Repo root listing above. Ensure scanner_github.py is present at repo root."

      - name: Run scanner_github.py (with 3 retries & exponential backoff)
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          exit_code=0

          while [ $attempts -lt $max_attempts ]; do
            attempts=$((attempts + 1))
            echo "Attempt $attempts / $max_attempts - running scanner_github.py"
            # run from repo root (checkout step puts source at working dir)
            if [ ! -f "./scanner_github.py" ]; then
              echo "ERROR: scanner_github.py not found at repo root. Aborting."
              exit 2
            fi

            python ./scanner_github.py && exit_code=0 && break || exit_code=$?

            echo "scanner_github.py exited with code $exit_code"
            if [ $attempts -lt $max_attempts ]; then
              sleep_seconds=$((attempts * 10))
              echo "Sleeping $sleep_seconds seconds before retry..."
              sleep $sleep_seconds
            fi
          done

          if [ $exit_code -ne 0 ]; then
            echo "All attempts failed"
            exit $exit_code
          fi

      - name: Finish
        run: echo "Scanner run completed (or failed earlier)."
